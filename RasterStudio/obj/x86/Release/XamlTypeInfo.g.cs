//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace RasterStudio
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        private global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace RasterStudio.RasterStudio_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::RasterStudio.RasterStudio_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::RasterStudio.RasterStudio_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[43];
            _typeNameTable[0] = "RasterStudio.UserControls.PaletteControl";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "Atari.Images.AtariColor";
            _typeNameTable[3] = "System.ValueType";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "Int32";
            _typeNameTable[6] = "Atari.Images.AtariPalette";
            _typeNameTable[7] = "RasterStudio.UserControls.RasterControl";
            _typeNameTable[8] = "System.Collections.ObjectModel.ObservableCollection`1<RasterStudio.Models.RasterThumb>";
            _typeNameTable[9] = "System.Collections.ObjectModel.Collection`1<RasterStudio.Models.RasterThumb>";
            _typeNameTable[10] = "RasterStudio.Models.RasterThumb";
            _typeNameTable[11] = "Boolean";
            _typeNameTable[12] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[13] = "RasterStudio.Models.EasingFunction";
            _typeNameTable[14] = "System.Enum";
            _typeNameTable[15] = "RasterStudio.Models.EasingMode";
            _typeNameTable[16] = "RasterStudio.UserControls.RasterSlider";
            _typeNameTable[17] = "SamuelBlanchard.Xaml.Controls.SlateView";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[19] = "SamuelBlanchard.Xaml.Controls.ShowElements";
            _typeNameTable[20] = "Double";
            _typeNameTable[21] = "Microsoft.Graphics.Canvas.Effects.EffectBorderMode";
            _typeNameTable[22] = "Microsoft.Graphics.Canvas.Effects.EffectOptimization";
            _typeNameTable[23] = "Microsoft.Graphics.Canvas.CanvasImageInterpolation";
            _typeNameTable[24] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[25] = "Windows.Foundation.Size";
            _typeNameTable[26] = "Byte[]";
            _typeNameTable[27] = "System.Array";
            _typeNameTable[28] = "Byte";
            _typeNameTable[29] = "System.Uri";
            _typeNameTable[30] = "RasterStudio.MainPage";
            _typeNameTable[31] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[32] = "RasterStudio.Models.AtariRaster";
            _typeNameTable[33] = "RasterStudio.UserControls.ColorPicker";
            _typeNameTable[34] = "RasterStudio.UserControls.ColorControl";
            _typeNameTable[35] = "RasterStudio.UserControls.ColorSelectorControl";
            _typeNameTable[36] = "RasterStudio.UserControls.GradientControl";
            _typeNameTable[37] = "String";
            _typeNameTable[38] = "RasterStudio.Models.EasingFunctionConverter";
            _typeNameTable[39] = "RasterStudio.Models.EasingModeConverter";
            _typeNameTable[40] = "RasterStudio.UserControls.RasterThumbControl";
            _typeNameTable[41] = "RasterStudio.UserControls.RGBColorControl";
            _typeNameTable[42] = "Windows.UI.Xaml.Media.Brush";

            _typeTable = new global::System.Type[43];
            _typeTable[0] = typeof(global::RasterStudio.UserControls.PaletteControl);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::Atari.Images.AtariColor);
            _typeTable[3] = typeof(global::System.ValueType);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.Int32);
            _typeTable[6] = typeof(global::Atari.Images.AtariPalette);
            _typeTable[7] = typeof(global::RasterStudio.UserControls.RasterControl);
            _typeTable[8] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::RasterStudio.Models.RasterThumb>);
            _typeTable[9] = typeof(global::System.Collections.ObjectModel.Collection<global::RasterStudio.Models.RasterThumb>);
            _typeTable[10] = typeof(global::RasterStudio.Models.RasterThumb);
            _typeTable[11] = typeof(global::System.Boolean);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[13] = typeof(global::RasterStudio.Models.EasingFunction);
            _typeTable[14] = typeof(global::System.Enum);
            _typeTable[15] = typeof(global::RasterStudio.Models.EasingMode);
            _typeTable[16] = typeof(global::RasterStudio.UserControls.RasterSlider);
            _typeTable[17] = typeof(global::SamuelBlanchard.Xaml.Controls.SlateView);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[19] = typeof(global::SamuelBlanchard.Xaml.Controls.ShowElements);
            _typeTable[20] = typeof(global::System.Double);
            _typeTable[21] = typeof(global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode);
            _typeTable[22] = typeof(global::Microsoft.Graphics.Canvas.Effects.EffectOptimization);
            _typeTable[23] = typeof(global::Microsoft.Graphics.Canvas.CanvasImageInterpolation);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[25] = typeof(global::Windows.Foundation.Size);
            _typeTable[26] = typeof(global::System.Byte[]);
            _typeTable[27] = typeof(global::System.Array);
            _typeTable[28] = typeof(global::System.Byte);
            _typeTable[29] = typeof(global::System.Uri);
            _typeTable[30] = typeof(global::RasterStudio.MainPage);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[32] = typeof(global::RasterStudio.Models.AtariRaster);
            _typeTable[33] = typeof(global::RasterStudio.UserControls.ColorPicker);
            _typeTable[34] = typeof(global::RasterStudio.UserControls.ColorControl);
            _typeTable[35] = typeof(global::RasterStudio.UserControls.ColorSelectorControl);
            _typeTable[36] = typeof(global::RasterStudio.UserControls.GradientControl);
            _typeTable[37] = typeof(global::System.String);
            _typeTable[38] = typeof(global::RasterStudio.Models.EasingFunctionConverter);
            _typeTable[39] = typeof(global::RasterStudio.Models.EasingModeConverter);
            _typeTable[40] = typeof(global::RasterStudio.UserControls.RasterThumbControl);
            _typeTable[41] = typeof(global::RasterStudio.UserControls.RGBColorControl);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Media.Brush);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_PaletteControl() { return new global::RasterStudio.UserControls.PaletteControl(); }
        private object Activate_6_AtariPalette() { return new global::Atari.Images.AtariPalette(); }
        private object Activate_7_RasterControl() { return new global::RasterStudio.UserControls.RasterControl(); }
        private object Activate_8_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::RasterStudio.Models.RasterThumb>(); }
        private object Activate_9_Collection() { return new global::System.Collections.ObjectModel.Collection<global::RasterStudio.Models.RasterThumb>(); }
        private object Activate_10_RasterThumb() { return new global::RasterStudio.Models.RasterThumb(); }
        private object Activate_16_RasterSlider() { return new global::RasterStudio.UserControls.RasterSlider(); }
        private object Activate_17_SlateView() { return new global::SamuelBlanchard.Xaml.Controls.SlateView(); }
        private object Activate_30_MainPage() { return new global::RasterStudio.MainPage(); }
        private object Activate_32_AtariRaster() { return new global::RasterStudio.Models.AtariRaster(); }
        private object Activate_33_ColorPicker() { return new global::RasterStudio.UserControls.ColorPicker(); }
        private object Activate_34_ColorControl() { return new global::RasterStudio.UserControls.ColorControl(); }
        private object Activate_36_GradientControl() { return new global::RasterStudio.UserControls.GradientControl(); }
        private object Activate_38_EasingFunctionConverter() { return new global::RasterStudio.Models.EasingFunctionConverter(); }
        private object Activate_39_EasingModeConverter() { return new global::RasterStudio.Models.EasingModeConverter(); }
        private object Activate_40_RasterThumbControl() { return new global::RasterStudio.UserControls.RasterThumbControl(); }
        private object Activate_41_RGBColorControl() { return new global::RasterStudio.UserControls.RGBColorControl(); }
        private void VectorAdd_8_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::RasterStudio.Models.RasterThumb>)instance;
            var newItem = (global::RasterStudio.Models.RasterThumb)item;
            collection.Add(newItem);
        }
        private void VectorAdd_9_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::RasterStudio.Models.RasterThumb>)instance;
            var newItem = (global::RasterStudio.Models.RasterThumb)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  RasterStudio.UserControls.PaletteControl
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_PaletteControl;
                userType.AddMemberName("SelectedColor");
                userType.AddMemberName("SelectedColorIndex");
                userType.AddMemberName("Palette");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Atari.Images.AtariColor
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.ValueType
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Int32
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Atari.Images.AtariPalette
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  RasterStudio.UserControls.RasterControl
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_7_RasterControl;
                userType.AddMemberName("RasterThumbs");
                userType.AddMemberName("SelectedRasterThumb");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  System.Collections.ObjectModel.ObservableCollection`1<RasterStudio.Models.RasterThumb>
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<RasterStudio.Models.RasterThumb>"));
                userType.CollectionAdd = VectorAdd_8_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  System.Collections.ObjectModel.Collection`1<RasterStudio.Models.RasterThumb>
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_Collection;
                userType.CollectionAdd = VectorAdd_9_Collection;
                xamlType = userType;
                break;

            case 10:   //  RasterStudio.Models.RasterThumb
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_RasterThumb;
                userType.AddMemberName("Line");
                userType.AddMemberName("IsEdge");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("Color12");
                userType.AddMemberName("Color");
                userType.AddMemberName("Color32");
                userType.AddMemberName("EasingFunction");
                userType.AddMemberName("EasingMode");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Boolean
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  RasterStudio.Models.EasingFunction
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::RasterStudio.Models.EasingFunction.None);
                userType.AddEnumValue("Linear", global::RasterStudio.Models.EasingFunction.Linear);
                userType.AddEnumValue("Quadratic", global::RasterStudio.Models.EasingFunction.Quadratic);
                userType.AddEnumValue("Cubic", global::RasterStudio.Models.EasingFunction.Cubic);
                userType.AddEnumValue("Quartic", global::RasterStudio.Models.EasingFunction.Quartic);
                userType.AddEnumValue("Quintic", global::RasterStudio.Models.EasingFunction.Quintic);
                userType.AddEnumValue("Sine", global::RasterStudio.Models.EasingFunction.Sine);
                userType.AddEnumValue("Circular", global::RasterStudio.Models.EasingFunction.Circular);
                userType.AddEnumValue("Exponential", global::RasterStudio.Models.EasingFunction.Exponential);
                userType.AddEnumValue("Elastic", global::RasterStudio.Models.EasingFunction.Elastic);
                userType.AddEnumValue("Back", global::RasterStudio.Models.EasingFunction.Back);
                userType.AddEnumValue("Bounce", global::RasterStudio.Models.EasingFunction.Bounce);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  System.Enum
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 15:   //  RasterStudio.Models.EasingMode
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Out", global::RasterStudio.Models.EasingMode.Out);
                userType.AddEnumValue("In", global::RasterStudio.Models.EasingMode.In);
                userType.AddEnumValue("InOut", global::RasterStudio.Models.EasingMode.InOut);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  RasterStudio.UserControls.RasterSlider
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_RasterSlider;
                userType.AddMemberName("SelectedRasterThumb");
                userType.AddMemberName("RasterThumbs");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  SamuelBlanchard.Xaml.Controls.SlateView
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_17_SlateView;
                userType.AddMemberName("ElementShown");
                userType.AddMemberName("AllowBlur");
                userType.AddMemberName("BlurEffectAmount");
                userType.AddMemberName("BlurEffectBorderMode");
                userType.AddMemberName("BlurEffectOptimization");
                userType.AddMemberName("BackgroundImageOpacity");
                userType.AddMemberName("ImageInterpolation");
                userType.AddMemberName("ImageMargin");
                userType.AddMemberName("PixelSize");
                userType.AddMemberName("PixelWidth");
                userType.AddMemberName("PixelHeight");
                userType.AddMemberName("Pixels");
                userType.AddMemberName("SourceUri");
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  SamuelBlanchard.Xaml.Controls.ShowElements
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::SamuelBlanchard.Xaml.Controls.ShowElements.None);
                userType.AddEnumValue("FrontAndBack", global::SamuelBlanchard.Xaml.Controls.ShowElements.FrontAndBack);
                userType.AddEnumValue("FrontOnly", global::SamuelBlanchard.Xaml.Controls.ShowElements.FrontOnly);
                userType.AddEnumValue("BackOnly", global::SamuelBlanchard.Xaml.Controls.ShowElements.BackOnly);
                xamlType = userType;
                break;

            case 20:   //  Double
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Microsoft.Graphics.Canvas.Effects.EffectBorderMode
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Soft", global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode.Soft);
                userType.AddEnumValue("Hard", global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode.Hard);
                xamlType = userType;
                break;

            case 22:   //  Microsoft.Graphics.Canvas.Effects.EffectOptimization
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Speed", global::Microsoft.Graphics.Canvas.Effects.EffectOptimization.Speed);
                userType.AddEnumValue("Balanced", global::Microsoft.Graphics.Canvas.Effects.EffectOptimization.Balanced);
                userType.AddEnumValue("Quality", global::Microsoft.Graphics.Canvas.Effects.EffectOptimization.Quality);
                xamlType = userType;
                break;

            case 23:   //  Microsoft.Graphics.Canvas.CanvasImageInterpolation
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("NearestNeighbor", global::Microsoft.Graphics.Canvas.CanvasImageInterpolation.NearestNeighbor);
                userType.AddEnumValue("Linear", global::Microsoft.Graphics.Canvas.CanvasImageInterpolation.Linear);
                userType.AddEnumValue("Cubic", global::Microsoft.Graphics.Canvas.CanvasImageInterpolation.Cubic);
                userType.AddEnumValue("MultiSampleLinear", global::Microsoft.Graphics.Canvas.CanvasImageInterpolation.MultiSampleLinear);
                userType.AddEnumValue("Anisotropic", global::Microsoft.Graphics.Canvas.CanvasImageInterpolation.Anisotropic);
                userType.AddEnumValue("HighQualityCubic", global::Microsoft.Graphics.Canvas.CanvasImageInterpolation.HighQualityCubic);
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Windows.Foundation.Size
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Byte[]
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  System.Array
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 28:   //  Byte
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 29:   //  System.Uri
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  RasterStudio.MainPage
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_MainPage;
                userType.AddMemberName("SelectedRasterThumb");
                userType.AddMemberName("SelectedRaster");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  RasterStudio.Models.AtariRaster
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  RasterStudio.UserControls.ColorPicker
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_33_ColorPicker;
                userType.AddMemberName("AtariColor");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  RasterStudio.UserControls.ColorControl
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_34_ColorControl;
                userType.AddMemberName("AtariColor");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  RasterStudio.UserControls.ColorSelectorControl
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("Color");
                userType.AddMemberName("ColorIndex");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("HaveRasterThumbDefined");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  RasterStudio.UserControls.GradientControl
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_36_GradientControl;
                userType.AddMemberName("Text");
                userType.AddMemberName("ColorStart");
                userType.AddMemberName("ColorStop");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  String
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  RasterStudio.Models.EasingFunctionConverter
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_38_EasingFunctionConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  RasterStudio.Models.EasingModeConverter
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_EasingModeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  RasterStudio.UserControls.RasterThumbControl
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_40_RasterThumbControl;
                userType.AddMemberName("RasterThumb");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  RasterStudio.UserControls.RGBColorControl
                userType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_41_RGBColorControl;
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("Color");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::SamuelBlanchard.Xaml.Controls.SamuelBlanchard_Xaml_Controls_SlateView_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_PaletteControl_SelectedColor(object instance)
        {
            var that = (global::RasterStudio.UserControls.PaletteControl)instance;
            return that.SelectedColor;
        }
        private object get_1_PaletteControl_SelectedColorIndex(object instance)
        {
            var that = (global::RasterStudio.UserControls.PaletteControl)instance;
            return that.SelectedColorIndex;
        }
        private void set_1_PaletteControl_SelectedColorIndex(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.PaletteControl)instance;
            that.SelectedColorIndex = (global::System.Int32)Value;
        }
        private object get_2_PaletteControl_Palette(object instance)
        {
            var that = (global::RasterStudio.UserControls.PaletteControl)instance;
            return that.Palette;
        }
        private void set_2_PaletteControl_Palette(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.PaletteControl)instance;
            that.Palette = (global::Atari.Images.AtariPalette)Value;
        }
        private object get_3_RasterControl_RasterThumbs(object instance)
        {
            var that = (global::RasterStudio.UserControls.RasterControl)instance;
            return that.RasterThumbs;
        }
        private object get_4_RasterThumb_Line(object instance)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            return that.Line;
        }
        private void set_4_RasterThumb_Line(object instance, object Value)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            that.Line = (global::System.Int32)Value;
        }
        private object get_5_RasterThumb_IsEdge(object instance)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            return that.IsEdge;
        }
        private void set_5_RasterThumb_IsEdge(object instance, object Value)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            that.IsEdge = (global::System.Boolean)Value;
        }
        private object get_6_RasterThumb_IsSelected(object instance)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            return that.IsSelected;
        }
        private void set_6_RasterThumb_IsSelected(object instance, object Value)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_7_RasterThumb_Color12(object instance)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            return that.Color12;
        }
        private void set_7_RasterThumb_Color12(object instance, object Value)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            that.Color12 = (global::System.Int32)Value;
        }
        private object get_8_RasterThumb_Color(object instance)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            return that.Color;
        }
        private void set_8_RasterThumb_Color(object instance, object Value)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            that.Color = (global::Atari.Images.AtariColor)Value;
        }
        private object get_9_RasterThumb_Color32(object instance)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            return that.Color32;
        }
        private object get_10_RasterThumb_EasingFunction(object instance)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            return that.EasingFunction;
        }
        private void set_10_RasterThumb_EasingFunction(object instance, object Value)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            that.EasingFunction = (global::RasterStudio.Models.EasingFunction)Value;
        }
        private object get_11_RasterThumb_EasingMode(object instance)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            return that.EasingMode;
        }
        private void set_11_RasterThumb_EasingMode(object instance, object Value)
        {
            var that = (global::RasterStudio.Models.RasterThumb)instance;
            that.EasingMode = (global::RasterStudio.Models.EasingMode)Value;
        }
        private object get_12_RasterControl_SelectedRasterThumb(object instance)
        {
            var that = (global::RasterStudio.UserControls.RasterControl)instance;
            return that.SelectedRasterThumb;
        }
        private void set_12_RasterControl_SelectedRasterThumb(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.RasterControl)instance;
            that.SelectedRasterThumb = (global::RasterStudio.Models.RasterThumb)Value;
        }
        private object get_13_RasterSlider_SelectedRasterThumb(object instance)
        {
            var that = (global::RasterStudio.UserControls.RasterSlider)instance;
            return that.SelectedRasterThumb;
        }
        private void set_13_RasterSlider_SelectedRasterThumb(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.RasterSlider)instance;
            that.SelectedRasterThumb = (global::RasterStudio.Models.RasterThumb)Value;
        }
        private object get_14_RasterSlider_RasterThumbs(object instance)
        {
            var that = (global::RasterStudio.UserControls.RasterSlider)instance;
            return that.RasterThumbs;
        }
        private object get_15_SlateView_ElementShown(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.ElementShown;
        }
        private void set_15_SlateView_ElementShown(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.ElementShown = (global::SamuelBlanchard.Xaml.Controls.ShowElements)Value;
        }
        private object get_16_SlateView_AllowBlur(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.AllowBlur;
        }
        private void set_16_SlateView_AllowBlur(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.AllowBlur = (global::System.Boolean)Value;
        }
        private object get_17_SlateView_BlurEffectAmount(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.BlurEffectAmount;
        }
        private void set_17_SlateView_BlurEffectAmount(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.BlurEffectAmount = (global::System.Double)Value;
        }
        private object get_18_SlateView_BlurEffectBorderMode(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.BlurEffectBorderMode;
        }
        private void set_18_SlateView_BlurEffectBorderMode(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.BlurEffectBorderMode = (global::Microsoft.Graphics.Canvas.Effects.EffectBorderMode)Value;
        }
        private object get_19_SlateView_BlurEffectOptimization(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.BlurEffectOptimization;
        }
        private void set_19_SlateView_BlurEffectOptimization(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.BlurEffectOptimization = (global::Microsoft.Graphics.Canvas.Effects.EffectOptimization)Value;
        }
        private object get_20_SlateView_BackgroundImageOpacity(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.BackgroundImageOpacity;
        }
        private void set_20_SlateView_BackgroundImageOpacity(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.BackgroundImageOpacity = (global::System.Double)Value;
        }
        private object get_21_SlateView_ImageInterpolation(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.ImageInterpolation;
        }
        private void set_21_SlateView_ImageInterpolation(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.ImageInterpolation = (global::Microsoft.Graphics.Canvas.CanvasImageInterpolation)Value;
        }
        private object get_22_SlateView_ImageMargin(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.ImageMargin;
        }
        private void set_22_SlateView_ImageMargin(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.ImageMargin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_23_SlateView_PixelSize(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.PixelSize;
        }
        private object get_24_SlateView_PixelWidth(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.PixelWidth;
        }
        private object get_25_SlateView_PixelHeight(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.PixelHeight;
        }
        private object get_26_SlateView_Pixels(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.Pixels;
        }
        private object get_27_SlateView_SourceUri(object instance)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            return that.SourceUri;
        }
        private void set_27_SlateView_SourceUri(object instance, object Value)
        {
            var that = (global::SamuelBlanchard.Xaml.Controls.SlateView)instance;
            that.SourceUri = (global::System.Uri)Value;
        }
        private object get_28_MainPage_SelectedRasterThumb(object instance)
        {
            var that = (global::RasterStudio.MainPage)instance;
            return that.SelectedRasterThumb;
        }
        private void set_28_MainPage_SelectedRasterThumb(object instance, object Value)
        {
            var that = (global::RasterStudio.MainPage)instance;
            that.SelectedRasterThumb = (global::RasterStudio.Models.RasterThumb)Value;
        }
        private object get_29_MainPage_SelectedRaster(object instance)
        {
            var that = (global::RasterStudio.MainPage)instance;
            return that.SelectedRaster;
        }
        private object get_30_ColorPicker_AtariColor(object instance)
        {
            var that = (global::RasterStudio.UserControls.ColorPicker)instance;
            return that.AtariColor;
        }
        private void set_30_ColorPicker_AtariColor(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.ColorPicker)instance;
            that.AtariColor = (global::Atari.Images.AtariColor)Value;
        }
        private object get_31_ColorControl_AtariColor(object instance)
        {
            var that = (global::RasterStudio.UserControls.ColorControl)instance;
            return that.AtariColor;
        }
        private void set_31_ColorControl_AtariColor(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.ColorControl)instance;
            that.AtariColor = (global::Atari.Images.AtariColor)Value;
        }
        private object get_32_ColorSelectorControl_Color(object instance)
        {
            var that = (global::RasterStudio.UserControls.ColorSelectorControl)instance;
            return that.Color;
        }
        private object get_33_ColorSelectorControl_ColorIndex(object instance)
        {
            var that = (global::RasterStudio.UserControls.ColorSelectorControl)instance;
            return that.ColorIndex;
        }
        private void set_33_ColorSelectorControl_ColorIndex(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.ColorSelectorControl)instance;
            that.ColorIndex = (global::System.Int32)Value;
        }
        private object get_34_ColorSelectorControl_IsSelected(object instance)
        {
            var that = (global::RasterStudio.UserControls.ColorSelectorControl)instance;
            return that.IsSelected;
        }
        private void set_34_ColorSelectorControl_IsSelected(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.ColorSelectorControl)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_35_ColorSelectorControl_HaveRasterThumbDefined(object instance)
        {
            var that = (global::RasterStudio.UserControls.ColorSelectorControl)instance;
            return that.HaveRasterThumbDefined;
        }
        private void set_35_ColorSelectorControl_HaveRasterThumbDefined(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.ColorSelectorControl)instance;
            that.HaveRasterThumbDefined = (global::System.Boolean)Value;
        }
        private object get_36_GradientControl_Text(object instance)
        {
            var that = (global::RasterStudio.UserControls.GradientControl)instance;
            return that.Text;
        }
        private void set_36_GradientControl_Text(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.GradientControl)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_37_GradientControl_ColorStart(object instance)
        {
            var that = (global::RasterStudio.UserControls.GradientControl)instance;
            return that.ColorStart;
        }
        private void set_37_GradientControl_ColorStart(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.GradientControl)instance;
            that.ColorStart = (global::Atari.Images.AtariColor)Value;
        }
        private object get_38_GradientControl_ColorStop(object instance)
        {
            var that = (global::RasterStudio.UserControls.GradientControl)instance;
            return that.ColorStop;
        }
        private void set_38_GradientControl_ColorStop(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.GradientControl)instance;
            that.ColorStop = (global::Atari.Images.AtariColor)Value;
        }
        private object get_39_RasterThumbControl_RasterThumb(object instance)
        {
            var that = (global::RasterStudio.UserControls.RasterThumbControl)instance;
            return that.RasterThumb;
        }
        private void set_39_RasterThumbControl_RasterThumb(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.RasterThumbControl)instance;
            that.RasterThumb = (global::RasterStudio.Models.RasterThumb)Value;
        }
        private object get_40_RGBColorControl_IsSelected(object instance)
        {
            var that = (global::RasterStudio.UserControls.RGBColorControl)instance;
            return that.IsSelected;
        }
        private void set_40_RGBColorControl_IsSelected(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.RGBColorControl)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_41_RGBColorControl_Color(object instance)
        {
            var that = (global::RasterStudio.UserControls.RGBColorControl)instance;
            return that.Color;
        }
        private void set_41_RGBColorControl_Color(object instance, object Value)
        {
            var that = (global::RasterStudio.UserControls.RGBColorControl)instance;
            that.Color = (global::Windows.UI.Xaml.Media.Brush)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember xamlMember = null;
            global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "RasterStudio.UserControls.PaletteControl.SelectedColor":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.PaletteControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "SelectedColor", "Atari.Images.AtariColor");
                xamlMember.Getter = get_0_PaletteControl_SelectedColor;
                xamlMember.SetIsReadOnly();
                break;
            case "RasterStudio.UserControls.PaletteControl.SelectedColorIndex":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.PaletteControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "SelectedColorIndex", "Int32");
                xamlMember.Getter = get_1_PaletteControl_SelectedColorIndex;
                xamlMember.Setter = set_1_PaletteControl_SelectedColorIndex;
                break;
            case "RasterStudio.UserControls.PaletteControl.Palette":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.PaletteControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Palette", "Atari.Images.AtariPalette");
                xamlMember.Getter = get_2_PaletteControl_Palette;
                xamlMember.Setter = set_2_PaletteControl_Palette;
                break;
            case "RasterStudio.UserControls.RasterControl.RasterThumbs":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.RasterControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "RasterThumbs", "System.Collections.ObjectModel.ObservableCollection`1<RasterStudio.Models.RasterThumb>");
                xamlMember.Getter = get_3_RasterControl_RasterThumbs;
                xamlMember.SetIsReadOnly();
                break;
            case "RasterStudio.Models.RasterThumb.Line":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.Models.RasterThumb");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Line", "Int32");
                xamlMember.Getter = get_4_RasterThumb_Line;
                xamlMember.Setter = set_4_RasterThumb_Line;
                break;
            case "RasterStudio.Models.RasterThumb.IsEdge":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.Models.RasterThumb");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "IsEdge", "Boolean");
                xamlMember.Getter = get_5_RasterThumb_IsEdge;
                xamlMember.Setter = set_5_RasterThumb_IsEdge;
                break;
            case "RasterStudio.Models.RasterThumb.IsSelected":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.Models.RasterThumb");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_6_RasterThumb_IsSelected;
                xamlMember.Setter = set_6_RasterThumb_IsSelected;
                break;
            case "RasterStudio.Models.RasterThumb.Color12":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.Models.RasterThumb");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Color12", "Int32");
                xamlMember.Getter = get_7_RasterThumb_Color12;
                xamlMember.Setter = set_7_RasterThumb_Color12;
                break;
            case "RasterStudio.Models.RasterThumb.Color":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.Models.RasterThumb");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Color", "Atari.Images.AtariColor");
                xamlMember.Getter = get_8_RasterThumb_Color;
                xamlMember.Setter = set_8_RasterThumb_Color;
                break;
            case "RasterStudio.Models.RasterThumb.Color32":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.Models.RasterThumb");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Color32", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.Getter = get_9_RasterThumb_Color32;
                xamlMember.SetIsReadOnly();
                break;
            case "RasterStudio.Models.RasterThumb.EasingFunction":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.Models.RasterThumb");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "EasingFunction", "RasterStudio.Models.EasingFunction");
                xamlMember.Getter = get_10_RasterThumb_EasingFunction;
                xamlMember.Setter = set_10_RasterThumb_EasingFunction;
                break;
            case "RasterStudio.Models.RasterThumb.EasingMode":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.Models.RasterThumb");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "EasingMode", "RasterStudio.Models.EasingMode");
                xamlMember.Getter = get_11_RasterThumb_EasingMode;
                xamlMember.Setter = set_11_RasterThumb_EasingMode;
                break;
            case "RasterStudio.UserControls.RasterControl.SelectedRasterThumb":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.RasterControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "SelectedRasterThumb", "RasterStudio.Models.RasterThumb");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_RasterControl_SelectedRasterThumb;
                xamlMember.Setter = set_12_RasterControl_SelectedRasterThumb;
                break;
            case "RasterStudio.UserControls.RasterSlider.SelectedRasterThumb":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.RasterSlider");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "SelectedRasterThumb", "RasterStudio.Models.RasterThumb");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_RasterSlider_SelectedRasterThumb;
                xamlMember.Setter = set_13_RasterSlider_SelectedRasterThumb;
                break;
            case "RasterStudio.UserControls.RasterSlider.RasterThumbs":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.RasterSlider");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "RasterThumbs", "System.Collections.ObjectModel.ObservableCollection`1<RasterStudio.Models.RasterThumb>");
                xamlMember.Getter = get_14_RasterSlider_RasterThumbs;
                xamlMember.SetIsReadOnly();
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.ElementShown":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "ElementShown", "SamuelBlanchard.Xaml.Controls.ShowElements");
                xamlMember.Getter = get_15_SlateView_ElementShown;
                xamlMember.Setter = set_15_SlateView_ElementShown;
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.AllowBlur":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "AllowBlur", "Boolean");
                xamlMember.Getter = get_16_SlateView_AllowBlur;
                xamlMember.Setter = set_16_SlateView_AllowBlur;
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.BlurEffectAmount":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "BlurEffectAmount", "Double");
                xamlMember.Getter = get_17_SlateView_BlurEffectAmount;
                xamlMember.Setter = set_17_SlateView_BlurEffectAmount;
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.BlurEffectBorderMode":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "BlurEffectBorderMode", "Microsoft.Graphics.Canvas.Effects.EffectBorderMode");
                xamlMember.Getter = get_18_SlateView_BlurEffectBorderMode;
                xamlMember.Setter = set_18_SlateView_BlurEffectBorderMode;
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.BlurEffectOptimization":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "BlurEffectOptimization", "Microsoft.Graphics.Canvas.Effects.EffectOptimization");
                xamlMember.Getter = get_19_SlateView_BlurEffectOptimization;
                xamlMember.Setter = set_19_SlateView_BlurEffectOptimization;
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.BackgroundImageOpacity":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "BackgroundImageOpacity", "Double");
                xamlMember.Getter = get_20_SlateView_BackgroundImageOpacity;
                xamlMember.Setter = set_20_SlateView_BackgroundImageOpacity;
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.ImageInterpolation":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "ImageInterpolation", "Microsoft.Graphics.Canvas.CanvasImageInterpolation");
                xamlMember.Getter = get_21_SlateView_ImageInterpolation;
                xamlMember.Setter = set_21_SlateView_ImageInterpolation;
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.ImageMargin":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "ImageMargin", "Windows.UI.Xaml.Thickness");
                xamlMember.Getter = get_22_SlateView_ImageMargin;
                xamlMember.Setter = set_22_SlateView_ImageMargin;
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.PixelSize":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "PixelSize", "Windows.Foundation.Size");
                xamlMember.Getter = get_23_SlateView_PixelSize;
                xamlMember.SetIsReadOnly();
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.PixelWidth":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "PixelWidth", "Int32");
                xamlMember.Getter = get_24_SlateView_PixelWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.PixelHeight":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "PixelHeight", "Int32");
                xamlMember.Getter = get_25_SlateView_PixelHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.Pixels":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Pixels", "Byte[]");
                xamlMember.Getter = get_26_SlateView_Pixels;
                xamlMember.SetIsReadOnly();
                break;
            case "SamuelBlanchard.Xaml.Controls.SlateView.SourceUri":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SamuelBlanchard.Xaml.Controls.SlateView");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "SourceUri", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_SlateView_SourceUri;
                xamlMember.Setter = set_27_SlateView_SourceUri;
                break;
            case "RasterStudio.MainPage.SelectedRasterThumb":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.MainPage");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "SelectedRasterThumb", "RasterStudio.Models.RasterThumb");
                xamlMember.Getter = get_28_MainPage_SelectedRasterThumb;
                xamlMember.Setter = set_28_MainPage_SelectedRasterThumb;
                break;
            case "RasterStudio.MainPage.SelectedRaster":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.MainPage");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "SelectedRaster", "RasterStudio.Models.AtariRaster");
                xamlMember.Getter = get_29_MainPage_SelectedRaster;
                xamlMember.SetIsReadOnly();
                break;
            case "RasterStudio.UserControls.ColorPicker.AtariColor":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.ColorPicker");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "AtariColor", "Atari.Images.AtariColor");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_ColorPicker_AtariColor;
                xamlMember.Setter = set_30_ColorPicker_AtariColor;
                break;
            case "RasterStudio.UserControls.ColorControl.AtariColor":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.ColorControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "AtariColor", "Atari.Images.AtariColor");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_ColorControl_AtariColor;
                xamlMember.Setter = set_31_ColorControl_AtariColor;
                break;
            case "RasterStudio.UserControls.ColorSelectorControl.Color":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.ColorSelectorControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Color", "Atari.Images.AtariColor");
                xamlMember.Getter = get_32_ColorSelectorControl_Color;
                xamlMember.SetIsReadOnly();
                break;
            case "RasterStudio.UserControls.ColorSelectorControl.ColorIndex":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.ColorSelectorControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "ColorIndex", "Int32");
                xamlMember.Getter = get_33_ColorSelectorControl_ColorIndex;
                xamlMember.Setter = set_33_ColorSelectorControl_ColorIndex;
                break;
            case "RasterStudio.UserControls.ColorSelectorControl.IsSelected":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.ColorSelectorControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ColorSelectorControl_IsSelected;
                xamlMember.Setter = set_34_ColorSelectorControl_IsSelected;
                break;
            case "RasterStudio.UserControls.ColorSelectorControl.HaveRasterThumbDefined":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.ColorSelectorControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "HaveRasterThumbDefined", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_ColorSelectorControl_HaveRasterThumbDefined;
                xamlMember.Setter = set_35_ColorSelectorControl_HaveRasterThumbDefined;
                break;
            case "RasterStudio.UserControls.GradientControl.Text":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.GradientControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_36_GradientControl_Text;
                xamlMember.Setter = set_36_GradientControl_Text;
                break;
            case "RasterStudio.UserControls.GradientControl.ColorStart":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.GradientControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "ColorStart", "Atari.Images.AtariColor");
                xamlMember.Getter = get_37_GradientControl_ColorStart;
                xamlMember.Setter = set_37_GradientControl_ColorStart;
                break;
            case "RasterStudio.UserControls.GradientControl.ColorStop":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.GradientControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "ColorStop", "Atari.Images.AtariColor");
                xamlMember.Getter = get_38_GradientControl_ColorStop;
                xamlMember.Setter = set_38_GradientControl_ColorStop;
                break;
            case "RasterStudio.UserControls.RasterThumbControl.RasterThumb":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.RasterThumbControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "RasterThumb", "RasterStudio.Models.RasterThumb");
                xamlMember.Getter = get_39_RasterThumbControl_RasterThumb;
                xamlMember.Setter = set_39_RasterThumbControl_RasterThumb;
                break;
            case "RasterStudio.UserControls.RGBColorControl.IsSelected":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.RGBColorControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_RGBColorControl_IsSelected;
                xamlMember.Setter = set_40_RGBColorControl_IsSelected;
                break;
            case "RasterStudio.UserControls.RGBColorControl.Color":
                userType = (global::RasterStudio.RasterStudio_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RasterStudio.UserControls.RGBColorControl");
                xamlMember = new global::RasterStudio.RasterStudio_XamlTypeInfo.XamlMember(this, "Color", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_RGBColorControl_Color;
                xamlMember.Setter = set_41_RGBColorControl_Color;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::RasterStudio.RasterStudio_XamlTypeInfo.XamlSystemBaseType
        , global::Windows.UI.Xaml.Markup.IXamlType2
    {
        global::RasterStudio.RasterStudio_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;
        global::Windows.UI.Xaml.Markup.IXamlType _boxedType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::RasterStudio.RasterStudio_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        public global::Windows.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Windows.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::RasterStudio.RasterStudio_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::RasterStudio.RasterStudio_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

